# 1 "main.c"
# 1 "d:/distr/tcc/include/stdio.h" 1
# 9 "d:/distr/tcc/include/stdio.h"
# 1 "d:/distr/tcc/include/_mingw.h" 1
# 27 "d:/distr/tcc/include/_mingw.h"
# 1 "d:/distr/tcc/include/stddef.h" 1



typedef unsigned long long size_t;
typedef long long ssize_t;
typedef unsigned short wchar_t;
typedef long long ptrdiff_t;
typedef long long intptr_t;
typedef unsigned long long uintptr_t;



typedef signed char int8_t;
typedef signed short int int16_t;
typedef signed int int32_t;



typedef signed long long int int64_t;

typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;



typedef unsigned long long int uint64_t;
# 37 "d:/distr/tcc/include/stddef.h"
void *alloca(size_t size);
# 28 "d:/distr/tcc/include/_mingw.h" 2
# 1 "d:/distr/tcc/include/stdarg.h" 1
# 34 "d:/distr/tcc/include/stdarg.h"
typedef char *va_list;
# 76 "d:/distr/tcc/include/stdarg.h"
typedef va_list __gnuc_va_list;
# 29 "d:/distr/tcc/include/_mingw.h" 2
# 104 "d:/distr/tcc/include/_mingw.h"
typedef long __time32_t;




typedef long long __time64_t;







typedef __time64_t time_t;





typedef wchar_t wctype_t;




typedef unsigned short wint_t;


typedef int errno_t;


typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
typedef struct localeinfo_struct _locale_tstruct,*_locale_t;
# 10 "d:/distr/tcc/include/stdio.h" 2

#pragma pack(push,8)
# 24 "d:/distr/tcc/include/stdio.h"
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;
# 78 "d:/distr/tcc/include/stdio.h"
  typedef long _off_t;

  typedef long off_t;






  typedef long long _off64_t;

  typedef long long off64_t;





  extern FILE * __iob_func(void);
# 113 "d:/distr/tcc/include/stdio.h"
  typedef long long fpos_t;
# 150 "d:/distr/tcc/include/stdio.h"
  extern int  _filbuf(FILE *_File);
  extern int  _flsbuf(int _Ch,FILE *_File);



  extern FILE * _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void  clearerr(FILE *_File);
  int  fclose(FILE *_File);
  extern int  _fcloseall(void);



  extern FILE * _fdopen(int _FileHandle,const char *_Mode);

  int  feof(FILE *_File);
  int  ferror(FILE *_File);
  int  fflush(FILE *_File);
  int  fgetc(FILE *_File);
  extern int  _fgetchar(void);
  int  fgetpos(FILE *_File ,fpos_t *_Pos);
  char * fgets(char *_Buf,int _MaxCount,FILE *_File);



  extern int  _fileno(FILE *_File);

  extern char * _tempnam(const char *_DirName,const char *_FilePrefix);
  extern int  _flushall(void);
  FILE * fopen(const char *_Filename,const char *_Mode);
  FILE *fopen64(const char *filename,const char *mode);
  int  fprintf(FILE *_File,const char *_Format,...);
  int  fputc(int _Ch,FILE *_File);
  extern int  _fputchar(int _Ch);
  int  fputs(const char *_Str,FILE *_File);
  size_t  fread(void *_DstBuf,size_t _ElementSize,size_t _Count,FILE *_File);
  FILE * freopen(const char *_Filename,const char *_Mode,FILE *_File);
  int  fscanf(FILE *_File,const char *_Format,...);
  int  fsetpos(FILE *_File,const fpos_t *_Pos);
  int  fseek(FILE *_File,long _Offset,int _Origin);
   int fseeko64(FILE* stream, _off64_t offset, int whence);
  long  ftell(FILE *_File);
  _off64_t ftello64(FILE * stream);
  int  _fseeki64(FILE *_File,long long _Offset,int _Origin);
  long long  _ftelli64(FILE *_File);
  size_t  fwrite(const void *_Str,size_t _Size,size_t _Count,FILE *_File);
  int  getc(FILE *_File);
  int  getchar(void);
  extern int  _getmaxstdio(void);
  char * gets(char *_Buffer);
  int  _getw(FILE *_File);


  void  perror(const char *_ErrMsg);

  extern int  _pclose(FILE *_File);
  extern FILE * _popen(const char *_Command,const char *_Mode);




  int  printf(const char *_Format,...);
  int  putc(int _Ch,FILE *_File);
  int  putchar(int _Ch);
  int  puts(const char *_Str);
  extern int  _putw(int _Word,FILE *_File);


  int  remove(const char *_Filename);
  int  rename(const char *_OldFilename,const char *_NewFilename);
  extern int  _unlink(const char *_Filename);

  int  unlink(const char *_Filename);


  void  rewind(FILE *_File);
  extern int  _rmtmp(void);
  int  scanf(const char *_Format,...);
  void  setbuf(FILE *_File,char *_Buffer);
  extern int  _setmaxstdio(int _Max);
  extern unsigned int  _set_output_format(unsigned int _Format);
  extern unsigned int  _get_output_format(void);
  int  setvbuf(FILE *_File,char *_Buf,int _Mode,size_t _Size);
  extern int  _scprintf(const char *_Format,...);
  int  sscanf(const char *_Src,const char *_Format,...);
  extern int  _snscanf(const char *_Src,size_t _MaxCount,const char *_Format,...);
  FILE * tmpfile(void);
  char * tmpnam(char *_Buffer);
  int  ungetc(int _Ch,FILE *_File);
  int  vfprintf(FILE *_File,const char *_Format,va_list _ArgList);
  int  vprintf(const char *_Format,va_list _ArgList);





  extern
  __attribute__((format(gnu_printf, 3, 0))) __attribute__((nonnull (3)))
  int __mingw_vsnprintf(char *_DstBuf,size_t _MaxCount,const char *_Format,va_list _ArgList);
  extern
  __attribute__((format(gnu_printf, 3, 4))) __attribute__((nonnull (3)))
  int __mingw_snprintf(char* s, size_t n, const char*  format, ...);
  int  vsnprintf(char *_DstBuf,size_t _MaxCount,const char *_Format,va_list _ArgList);
  extern int  _snprintf(char *_Dest,size_t _Count,const char *_Format,...);
  extern int  _vsnprintf(char *_Dest,size_t _Count,const char *_Format,va_list _Args);
  int  sprintf(char *_Dest,const char *_Format,...);
  int  vsprintf(char *_Dest,const char *_Format,va_list _Args);

  int  snprintf(char* s, size_t n, const char*  format, ...);
  extern __inline__ int  vsnprintf (char* s, size_t n, const char* format,va_list arg) {
    return _vsnprintf ( s, n, format, arg);
  }
  int  vscanf(const char * Format, va_list argp);
  int  vfscanf (FILE * fp, const char * Format,va_list argp);
  int  vsscanf (const char * _Str,const char * Format,va_list argp);
# 278 "d:/distr/tcc/include/stdio.h"
  extern int  _vscprintf(const char *_Format,va_list _ArgList);
  extern int  _set_printf_count_output(int _Value);
  extern int  _get_printf_count_output(void);
# 291 "d:/distr/tcc/include/stdio.h"
  extern FILE * _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);

  wint_t  fgetwc(FILE *_File);
  extern wint_t  _fgetwchar(void);
  wint_t  fputwc(wchar_t _Ch,FILE *_File);
  extern wint_t  _fputwchar(wchar_t _Ch);
  wint_t  getwc(FILE *_File);
  wint_t  getwchar(void);
  wint_t  putwc(wchar_t _Ch,FILE *_File);
  wint_t  putwchar(wchar_t _Ch);
  wint_t  ungetwc(wint_t _Ch,FILE *_File);
  wchar_t * fgetws(wchar_t *_Dst,int _SizeInWords,FILE *_File);
  int  fputws(const wchar_t *_Str,FILE *_File);
  extern wchar_t * _getws(wchar_t *_String);
  extern int  _putws(const wchar_t *_Str);
  int  fwprintf(FILE *_File,const wchar_t *_Format,...);
  int  wprintf(const wchar_t *_Format,...);
  extern int  _scwprintf(const wchar_t *_Format,...);
  int  vfwprintf(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  int  vwprintf(const wchar_t *_Format,va_list _ArgList);
  extern int  swprintf(wchar_t*, const wchar_t*, ...);
  extern int  vswprintf(wchar_t*, const wchar_t*,va_list);
  extern int  _swprintf_c(wchar_t *_DstBuf,size_t _SizeInWords,const wchar_t *_Format,...);
  extern int  _vswprintf_c(wchar_t *_DstBuf,size_t _SizeInWords,const wchar_t *_Format,va_list _ArgList);
  extern int  _snwprintf(wchar_t *_Dest,size_t _Count,const wchar_t *_Format,...);
  extern int  _vsnwprintf(wchar_t *_Dest,size_t _Count,const wchar_t *_Format,va_list _Args);

  int  snwprintf (wchar_t* s, size_t n, const wchar_t*  format, ...);
  extern __inline__ int  vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, va_list arg) { return _vsnwprintf(s,n,format,arg); }
  int  vwscanf (const wchar_t *, va_list);
  int  vfwscanf (FILE *,const wchar_t *,va_list);
  int  vswscanf (const wchar_t *,const wchar_t *,va_list);

  extern int  _swprintf(wchar_t *_Dest,const wchar_t *_Format,...);
  extern int  _vswprintf(wchar_t *_Dest,const wchar_t *_Format,va_list _Args);


# 1 "d:/distr/tcc/include/vadefs.h" 1
# 329 "d:/distr/tcc/include/stdio.h" 2
# 340 "d:/distr/tcc/include/stdio.h"
  extern wchar_t * _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  extern int  _vscwprintf(const wchar_t *_Format,va_list _ArgList);
  int  fwscanf(FILE *_File,const wchar_t *_Format,...);
  int  swscanf(const wchar_t *_Src,const wchar_t *_Format,...);
  extern int  _snwscanf(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,...);
  int  wscanf(const wchar_t *_Format,...);
  extern FILE * _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  extern FILE * _wfopen(const wchar_t *_Filename,const wchar_t *_Mode);
  extern FILE * _wfreopen(const wchar_t *_Filename,const wchar_t *_Mode,FILE *_OldFile);


  extern void  _wperror(const wchar_t *_ErrMsg);

  extern FILE * _wpopen(const wchar_t *_Command,const wchar_t *_Mode);



  extern int  _wremove(const wchar_t *_Filename);
  extern wchar_t * _wtmpnam(wchar_t *_Buffer);
  extern wint_t  _fgetwc_nolock(FILE *_File);
  extern wint_t  _fputwc_nolock(wchar_t _Ch,FILE *_File);
  extern wint_t  _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 393 "d:/distr/tcc/include/stdio.h"
  extern void  _lock_file(FILE *_File);
  extern void  _unlock_file(FILE *_File);
  extern int  _fclose_nolock(FILE *_File);
  extern int  _fflush_nolock(FILE *_File);
  extern size_t  _fread_nolock(void *_DstBuf,size_t _ElementSize,size_t _Count,FILE *_File);
  extern int  _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  extern long  _ftell_nolock(FILE *_File);
  extern int  _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  extern long long  _ftelli64_nolock(FILE *_File);
  extern size_t  _fwrite_nolock(const void *_DstBuf,size_t _Size,size_t _Count,FILE *_File);
  extern int  _ungetc_nolock(int _Ch,FILE *_File);





  char * tempnam(const char *_Directory,const char *_FilePrefix);
  int  fcloseall(void);
  FILE * fdopen(int _FileHandle,const char *_Format);
  int  fgetchar(void);
  int  fileno(FILE *_File);
  int  flushall(void);
  int  fputchar(int _Ch);
  int  getw(FILE *_File);
  int  putw(int _Ch,FILE *_File);
  int  rmtmp(void);






#pragma pack(pop)

# 1 "d:/distr/tcc/include/sec_api/stdio_s.h" 1
# 9 "d:/distr/tcc/include/sec_api/stdio_s.h"
# 1 "d:/distr/tcc/include/stdio.h" 1
# 10 "d:/distr/tcc/include/sec_api/stdio_s.h" 2
# 19 "d:/distr/tcc/include/sec_api/stdio_s.h"
  extern errno_t  clearerr_s(FILE *_File);
  int  fprintf_s(FILE *_File,const char *_Format,...);
  size_t  fread_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
  extern int  _fscanf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  int  printf_s(const char *_Format,...);
  extern int  _scanf_l(const char *_Format,_locale_t _Locale,...);
  extern int  _scanf_s_l(const char *_Format,_locale_t _Locale,...);
  extern int  _snprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,...);
  extern int  _snprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,...);
  extern int  _vsnprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,va_list _ArgList);
  int  sprintf_s(char *_DstBuf,size_t _DstSize,const char *_Format,...);
  extern int  _fscanf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  extern int  _sscanf_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  extern int  _sscanf_s_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  extern int  _snscanf_s(const char *_Src,size_t _MaxCount,const char *_Format,...);
  extern int  _snscanf_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  extern int  _snscanf_s_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  int  vfprintf_s(FILE *_File,const char *_Format,va_list _ArgList);
  int  vprintf_s(const char *_Format,va_list _ArgList);
  int  vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);
  extern int  _vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);
  int  vsprintf_s(char *_DstBuf,size_t _Size,const char *_Format,va_list _ArgList);
  extern int  _fprintf_p(FILE *_File,const char *_Format,...);
  extern int  _printf_p(const char *_Format,...);
  extern int  _sprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,...);
  extern int  _vfprintf_p(FILE *_File,const char *_Format,va_list _ArgList);
  extern int  _vprintf_p(const char *_Format,va_list _ArgList);
  extern int  _vsprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,va_list _ArgList);
  extern int  _scprintf_p(const char *_Format,...);
  extern int  _vscprintf_p(const char *_Format,va_list _ArgList);
  extern int  _printf_l(const char *_Format,_locale_t _Locale,...);
  extern int  _printf_p_l(const char *_Format,_locale_t _Locale,...);
  extern int  _vprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _vprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _fprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  extern int  _fprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  extern int  _vfprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _vfprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _sprintf_l(char *_DstBuf,const char *_Format,_locale_t _Locale,...);
  extern int  _sprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  extern int  _vsprintf_l(char *_DstBuf,const char *_Format,_locale_t,va_list _ArgList);
  extern int  _vsprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _scprintf_l(const char *_Format,_locale_t _Locale,...);
  extern int  _scprintf_p_l(const char *_Format,_locale_t _Locale,...);
  extern int  _vscprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _vscprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _printf_s_l(const char *_Format,_locale_t _Locale,...);
  extern int  _vprintf_s_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _fprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  extern int  _vfprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _sprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,...);
  extern int  _vsprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _snprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  extern int  _vsnprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _snprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  extern int  _snprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  extern int  _vsnprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _vsnprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *,_locale_t _Locale,va_list _ArgList);



  extern wchar_t * _getws_s(wchar_t *_Str,size_t _SizeInWords);
  int  fwprintf_s(FILE *_File,const wchar_t *_Format,...);
  int  wprintf_s(const wchar_t *_Format,...);
  int  vwprintf_s(const wchar_t *_Format,va_list _ArgList);
  int  swprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,...);
  int  vswprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,va_list _ArgList);
  extern int  _snwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,...);
  extern int  _vsnwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);
  extern int  _wprintf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vwprintf_s_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _fwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vfwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _swprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vswprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _snwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vsnwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _fwscanf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _swscanf_s_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _snwscanf_s(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,...);
  extern int  _snwscanf_s_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _wscanf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  extern errno_t  _wfopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode);
  extern errno_t  _wfreopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode,FILE *_OldFile);
  extern errno_t  _wtmpnam_s(wchar_t *_DstBuf,size_t _SizeInWords);
  extern int  _fwprintf_p(FILE *_File,const wchar_t *_Format,...);
  extern int  _wprintf_p(const wchar_t *_Format,...);
  extern int  _vfwprintf_p(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  extern int  _vwprintf_p(const wchar_t *_Format,va_list _ArgList);
  extern int  _swprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,...);
  extern int  _vswprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);
  extern int  _scwprintf_p(const wchar_t *_Format,...);
  extern int  _vscwprintf_p(const wchar_t *_Format,va_list _ArgList);
  extern int  _wprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _wprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _vwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _fwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _fwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vfwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _vfwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _swprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _swprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vswprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _vswprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _scwprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _scwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vscwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _snwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _vsnwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  __swprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,...);
  extern int  __vswprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,va_list _Args);
  extern int  _vscwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  extern int  _fwscanf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _swscanf_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _snwscanf_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  extern int  _wscanf_l(const wchar_t *_Format,_locale_t _Locale,...);



  extern size_t  _fread_nolock_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
# 428 "d:/distr/tcc/include/stdio.h" 2
# 2 "main.c" 2
# 1 "d:/distr/tcc/include/stdbool.h" 1
# 3 "main.c" 2
# 1 "d:/distr/tcc/include/stdlib.h" 1
# 10 "d:/distr/tcc/include/stdlib.h"
# 1 "d:/distr/tcc/include/limits.h" 1
# 11 "d:/distr/tcc/include/stdlib.h" 2

#pragma pack(push,8)
# 32 "d:/distr/tcc/include/stdlib.h"
  typedef int ( *_onexit_t)(void);
# 42 "d:/distr/tcc/include/stdlib.h"
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;




  typedef struct {
    long double x;
  } _LONGDOUBLE;



#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 97 "d:/distr/tcc/include/stdlib.h"
  extern int *_imp____mb_cur_max;






  extern int* _imp____mbcur_max;
# 128 "d:/distr/tcc/include/stdlib.h"
  typedef void ( *_purecall_handler)(void);

  extern _purecall_handler  _set_purecall_handler(_purecall_handler _Handler);
  extern _purecall_handler  _get_purecall_handler(void);

  typedef void ( *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  _invalid_parameter_handler  _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  _invalid_parameter_handler  _get_invalid_parameter_handler(void);



  extern extern int * _errno(void);

  errno_t  _set_errno(int _Value);
  errno_t  _get_errno(int *_Value);

  extern unsigned long * __doserrno(void);

  errno_t  _set_doserrno(unsigned long _Value);
  errno_t  _get_doserrno(unsigned long *_Value);




  extern char *_sys_errlist[1];
  extern int _sys_nerr;
# 169 "d:/distr/tcc/include/stdlib.h"
  extern int *_imp____argc;







  extern char ***_imp____argv;







  extern wchar_t ***_imp____wargv;
# 197 "d:/distr/tcc/include/stdlib.h"
  extern char ***_imp___environ;
# 206 "d:/distr/tcc/include/stdlib.h"
  extern wchar_t ***_imp___wenviron;
# 215 "d:/distr/tcc/include/stdlib.h"
  extern char **_imp___pgmptr;
# 224 "d:/distr/tcc/include/stdlib.h"
  extern wchar_t **_imp___wpgmptr;


  errno_t  _get_pgmptr(char **_Value);
  errno_t  _get_wpgmptr(wchar_t **_Value);





  extern int *_imp___fmode;


  extern errno_t  _set_fmode(int _Mode);
  extern errno_t  _get_fmode(int *_PMode);






  extern unsigned int *_imp___osplatform;
# 254 "d:/distr/tcc/include/stdlib.h"
  extern unsigned int *_imp___osver;
# 263 "d:/distr/tcc/include/stdlib.h"
  extern unsigned int *_imp___winver;
# 272 "d:/distr/tcc/include/stdlib.h"
  extern unsigned int *_imp___winmajor;
# 281 "d:/distr/tcc/include/stdlib.h"
  extern unsigned int *_imp___winminor;



  errno_t  _get_osplatform(unsigned int *_Value);
  errno_t  _get_osver(unsigned int *_Value);
  errno_t  _get_winver(unsigned int *_Value);
  errno_t  _get_winmajor(unsigned int *_Value);
  errno_t  _get_winminor(unsigned int *_Value);
# 303 "d:/distr/tcc/include/stdlib.h"
  void   exit(int _Code) ;
  extern void   _exit(int _Code) ;


  void  _Exit(int) ;
  extern __inline__  void   _Exit(int status)
  {  _exit(status); }




  void  __attribute__((noreturn)) abort(void);




  extern unsigned int  _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int  abs(int _X);
  long  labs(long _X);



  long long  _abs64(long long);

  int  atexit(void ( *)(void));


  double  atof(const char *_String);
  double  _atof_l(const char *_String,_locale_t _Locale);

  int  atoi(const char *_Str);
  extern int  _atoi_l(const char *_Str,_locale_t _Locale);
  long  atol(const char *_Str);
  extern long  _atol_l(const char *_Str,_locale_t _Locale);


  void * bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int ( *_PtFuncCompare)(const void *,const void *));
  void  qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int ( *_PtFuncCompare)(const void *,const void *));

  unsigned short  _byteswap_ushort(unsigned short _Short);


  unsigned long long  _byteswap_uint64(unsigned long long _Int64);

  div_t  div(int _Numerator,int _Denominator);
  char * getenv(const char *_VarName);
  extern char * _itoa(int _Value,char *_Dest,int _Radix);

  extern char * _i64toa(long long _Val,char *_DstBuf,int _Radix);
  extern char * _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix);
  extern long long  _atoi64(const char *_String);
  extern long long  _atoi64_l(const char *_String,_locale_t _Locale);
  extern long long  _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  extern long long  _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  extern unsigned long long  _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  extern unsigned long long  _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);

  ldiv_t  ldiv(long _Numerator,long _Denominator);
  extern char * _ltoa(long _Value,char *_Dest,int _Radix);
  int  mblen(const char *_Ch,size_t _MaxCount);
  extern int  _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  extern size_t  _mbstrlen(const char *_Str);
  extern size_t  _mbstrlen_l(const char *_Str,_locale_t _Locale);
  extern size_t  _mbstrnlen(const char *_Str,size_t _MaxCount);
  extern size_t  _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int  mbtowc(wchar_t *_DstCh,const char *_SrcCh,size_t _SrcSizeInBytes);
  extern int  _mbtowc_l(wchar_t *_DstCh,const char *_SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t  mbstowcs(wchar_t *_Dest,const char *_Source,size_t _MaxCount);
  extern size_t  _mbstowcs_l(wchar_t *_Dest,const char *_Source,size_t _MaxCount,_locale_t _Locale);
  int  rand(void);
  extern int  _set_error_mode(int _Mode);
  void  srand(unsigned int _Seed);
  double  strtod(const char *_Str,char **_EndPtr);
  float  strtof(const char *nptr, char **endptr);

  float  strtof (const char * __restrict__, char ** __restrict__);
  long double  strtold(const char * __restrict__, char ** __restrict__);

  extern double  _strtod_l(const char *_Str,char **_EndPtr,_locale_t _Locale);
  long  strtol(const char *_Str,char **_EndPtr,int _Radix);
  extern long  _strtol_l(const char *_Str,char **_EndPtr,int _Radix,_locale_t _Locale);
  unsigned long  strtoul(const char *_Str,char **_EndPtr,int _Radix);
  extern unsigned long  _strtoul_l(const char *_Str,char **_EndPtr,int _Radix,_locale_t _Locale);


  int  system(const char *_Command);

  extern char * _ultoa(unsigned long _Value,char *_Dest,int _Radix);
  int  wctomb(char *_MbCh,wchar_t _WCh);
  extern int  _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale);
  size_t  wcstombs(char *_Dest,const wchar_t *_Source,size_t _MaxCount);
  extern size_t  _wcstombs_l(char *_Dest,const wchar_t *_Source,size_t _MaxCount,_locale_t _Locale);



  void * calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void  free(void *_Memory);
  void * malloc(size_t _Size);
  void * realloc(void *_Memory,size_t _NewSize);
  extern void * _recalloc(void *_Memory,size_t _Count,size_t _Size);


  extern void * _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  extern void * _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  extern void * _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  extern void * _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  extern void * _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);





  extern wchar_t * _itow(int _Value,wchar_t *_Dest,int _Radix);
  extern wchar_t * _ltow(long _Value,wchar_t *_Dest,int _Radix);
  extern wchar_t * _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix);
  double  wcstod(const wchar_t *_Str,wchar_t **_EndPtr);
  float  wcstof(const wchar_t *nptr, wchar_t **endptr);

  float  wcstof( const wchar_t * __restrict__, wchar_t ** __restrict__);
  long double  wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  extern double  _wcstod_l(const wchar_t *_Str,wchar_t **_EndPtr,_locale_t _Locale);
  long  wcstol(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  extern long  _wcstol_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  unsigned long  wcstoul(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  extern unsigned long  _wcstoul_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  extern wchar_t * _wgetenv(const wchar_t *_VarName);


  extern int  _wsystem(const wchar_t *_Command);

  extern double  _wtof(const wchar_t *_Str);
  extern double  _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  extern int  _wtoi(const wchar_t *_Str);
  extern int  _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  extern long  _wtol(const wchar_t *_Str);
  extern long  _wtol_l(const wchar_t *_Str,_locale_t _Locale);


  extern wchar_t * _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix);
  extern wchar_t * _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix);
  extern long long  _wtoi64(const wchar_t *_Str);
  extern long long  _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  extern long long  _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  extern long long  _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  extern unsigned long long  _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  extern unsigned long long  _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);





  extern char * _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  extern char * _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign);
  extern char * _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  extern char * _gcvt(double _Val,int _NumOfDigits,char *_DstBuf);
  extern int  _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  extern int  _atoldbl(_LDOUBLE *_Result,char *_Str);
  extern int  _atoflt(_CRT_FLOAT *_Result,char *_Str);
  extern int  _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  extern int  _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  extern int  _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
  unsigned long  _lrotl(unsigned long _Val,int _Shift);
  unsigned long  _lrotr(unsigned long _Val,int _Shift);
  extern void  _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t  _onexit(_onexit_t _Func);





  extern int  _putenv(const char *_EnvString);
  unsigned int  _rotl(unsigned int _Val,int _Shift);

  unsigned long long  _rotl64(unsigned long long _Val,int _Shift);

  unsigned int  _rotr(unsigned int _Val,int _Shift);

  unsigned long long  _rotr64(unsigned long long _Val,int _Shift);

  extern void  _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath);
  extern void  _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext);
  extern void  _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  extern wchar_t * _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  extern void  _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  extern int  _wputenv(const wchar_t *_EnvString);
  extern void  _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath);
  extern void  _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext);


  extern void  _beep(unsigned _Frequency,unsigned _Duration) ;

  extern void  _seterrormode(int _Mode) ;
  extern void  _sleep(unsigned long _Duration) ;
# 527 "d:/distr/tcc/include/stdlib.h"
  char * ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign);
  char * fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  char * gcvt(double _Val,int _NumOfDigits,char *_DstBuf);
  char * itoa(int _Val,char *_DstBuf,int _Radix);
  char * ltoa(long _Val,char *_DstBuf,int _Radix);
  int  putenv(const char *_EnvString);
  void  swab(char *_Buf1,char *_Buf2,int _SizeInBytes);
  char * ultoa(unsigned long _Val,char *_Dstbuf,int _Radix);
  _onexit_t  onexit(_onexit_t _Func);





  typedef struct { long long quot, rem; } lldiv_t;

  lldiv_t  lldiv(long long, long long);

  extern __inline__ long long  llabs(long long _j) { return (_j >= 0 ? _j : -_j); }

  long long   strtoll(const char* __restrict__, char** __restrict, int);
  unsigned long long   strtoull(const char* __restrict__, char** __restrict__, int);


  long long   atoll (const char *);


  long long   wtoll (const wchar_t *);
  char * lltoa (long long, char *, int);
  char * ulltoa (unsigned long long , char *, int);
  wchar_t * lltow (long long, wchar_t *, int);
  wchar_t * ulltow (unsigned long long, wchar_t *, int);


  extern __inline__ long long   atoll (const char * _c) { return _atoi64 (_c); }
  extern __inline__ char * lltoa (long long _n, char * _c, int _i) { return _i64toa (_n, _c, _i); }
  extern __inline__ char * ulltoa (unsigned long long _n, char * _c, int _i) { return _ui64toa (_n, _c, _i); }
  extern __inline__ long long   wtoll (const wchar_t * _w) { return _wtoi64 (_w); }
  extern __inline__ wchar_t * lltow (long long _n, wchar_t * _w, int _i) { return _i64tow (_n, _w, _i); }
  extern __inline__ wchar_t * ulltow (unsigned long long _n, wchar_t * _w, int _i) { return _ui64tow (_n, _w, _i); }
# 575 "d:/distr/tcc/include/stdlib.h"
#pragma pack(pop)

# 1 "d:/distr/tcc/include/sec_api/stdlib_s.h" 1
# 9 "d:/distr/tcc/include/sec_api/stdlib_s.h"
# 1 "d:/distr/tcc/include/stdlib.h" 1
# 10 "d:/distr/tcc/include/sec_api/stdlib_s.h" 2







  extern errno_t  _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  extern errno_t  _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);

  extern errno_t  _i64toa_s(long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  extern errno_t  _ui64toa_s(unsigned long long _Val,char *_DstBuf,size_t _Size,int _Radix);

  extern errno_t  _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  extern errno_t  mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  extern errno_t  _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  extern errno_t  _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  extern errno_t  _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  extern errno_t  wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  extern errno_t  _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);



  extern errno_t  _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern errno_t  _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern errno_t  _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern errno_t  _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  extern errno_t  _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);

  extern errno_t  _i64tow_s(long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern errno_t  _ui64tow_s(unsigned long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);




  extern errno_t  _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  extern errno_t  _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  extern errno_t  _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  extern errno_t  _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  extern errno_t  _putenv_s(const char *_Name,const char *_Value);
  extern errno_t  _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);
  extern errno_t  _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);



  extern errno_t  _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  extern errno_t  _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);
  extern errno_t  _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);
  extern errno_t  _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
# 578 "d:/distr/tcc/include/stdlib.h" 2
# 1 "d:/distr/tcc/include/malloc.h" 1
# 11 "d:/distr/tcc/include/malloc.h"
#pragma pack(push,8)
# 46 "d:/distr/tcc/include/malloc.h"
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 76 "d:/distr/tcc/include/malloc.h"
  extern int  _resetstkoflw (void);
  extern unsigned long  _set_malloc_crt_max_wait(unsigned long _NewValue);

  extern void * _expand(void *_Memory,size_t _NewSize);
  extern size_t  _msize(void *_Memory);
# 93 "d:/distr/tcc/include/malloc.h"
  extern size_t  _get_sbh_threshold(void);
  extern int  _set_sbh_threshold(size_t _NewValue);
  extern errno_t  _set_amblksiz(size_t _Value);
  extern errno_t  _get_amblksiz(size_t *_Value);
  extern int  _heapadd(void *_Memory,size_t _Size);
  extern int  _heapchk(void);
  extern int  _heapmin(void);
  extern int  _heapset(unsigned int _Fill);
  extern int  _heapwalk(_HEAPINFO *_EntryInfo);
  extern size_t  _heapused(size_t *_Used,size_t *_Commit);
  extern intptr_t  _get_heap_handle(void);
# 116 "d:/distr/tcc/include/malloc.h"
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
# 135 "d:/distr/tcc/include/malloc.h"
  static __inline void  _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
	free(_Memory);
      }





    }
  }
# 179 "d:/distr/tcc/include/malloc.h"
#pragma pack(pop)
# 579 "d:/distr/tcc/include/stdlib.h" 2
# 4 "main.c" 2

# 1 "utils.c" 1



# 1 "d:/distr/tcc/include/inttypes.h" 1
# 12 "d:/distr/tcc/include/inttypes.h"
# 1 "d:/distr/tcc/include/stdint.h" 1
# 32 "d:/distr/tcc/include/stdint.h"
# 1 "d:/distr/tcc/include/stddef.h" 1
# 33 "d:/distr/tcc/include/stdint.h" 2
# 48 "d:/distr/tcc/include/stdint.h"
typedef signed char int_least8_t;
typedef unsigned char   uint_least8_t;
typedef short  int_least16_t;
typedef unsigned short  uint_least16_t;
typedef int  int_least32_t;
typedef unsigned   uint_least32_t;
typedef long long  int_least64_t;
typedef unsigned long long   uint_least64_t;





typedef char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short  int_fast16_t;
typedef unsigned short  uint_fast16_t;
typedef int  int_fast32_t;
typedef unsigned  int  uint_fast32_t;
typedef long long  int_fast64_t;
typedef unsigned long long   uint_fast64_t;


typedef long long  intmax_t;
typedef unsigned long long   uintmax_t;
# 13 "d:/distr/tcc/include/inttypes.h" 2

# 1 "d:/distr/tcc/include/stddef.h" 1
# 15 "d:/distr/tcc/include/inttypes.h" 2





typedef struct {
	intmax_t quot;
	intmax_t rem;
	} imaxdiv_t;
# 276 "d:/distr/tcc/include/inttypes.h"
intmax_t  imaxabs (intmax_t j);
extern __inline__ intmax_t  imaxabs (intmax_t j)
	{return	(j >= 0 ? j : -j);}
imaxdiv_t  imaxdiv (intmax_t numer, intmax_t denom);



intmax_t  strtoimax (const char* __restrict__ nptr,
                            char** __restrict__ endptr, int base);
uintmax_t  strtoumax (const char* __restrict__ nptr,
			     char** __restrict__ endptr, int base);

intmax_t  wcstoimax (const wchar_t* __restrict__ nptr,
                            wchar_t** __restrict__ endptr, int base);
uintmax_t  wcstoumax (const wchar_t* __restrict__ nptr,
			     wchar_t** __restrict__ endptr, int base);
# 5 "utils.c" 2

typedef  int8_t  s8;
typedef  int16_t s16;
typedef  int32_t s32;
typedef  int64_t s64;
typedef uint8_t  u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

typedef u8 byte;

typedef float  float32;
typedef double float64;

# 1 "Array.c" 1


# 1 "d:/distr/tcc/include/string.h" 1
# 32 "d:/distr/tcc/include/string.h"
  extern void * _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
   void * memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  extern int  _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  extern int  _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int  memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * memcpy(void *_Dst,const void *_Src,size_t _Size);
  void * memset(void *_Dst,int _Val,size_t _Size);

  void * memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size);
  int  memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);


  char * _strset(char *_Str,int _Val);
  char * strcpy(char *_Dest,const char *_Source);
  char * strcat(char *_Dest,const char *_Source);
  int  strcmp(const char *_Str1,const char *_Str2);
  size_t  strlen(const char *_Str);



  void * memmove(void *_Dst,const void *_Src,size_t _Size);
  extern char * _strdup(const char *_Src);
   char * strchr(const char *_Str,int _Val);
  extern int  _stricmp(const char *_Str1,const char *_Str2);
  extern int  _strcmpi(const char *_Str1,const char *_Str2);
  extern int  _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int  strcoll(const char *_Str1,const char *_Str2);
  extern int  _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  extern int  _stricoll(const char *_Str1,const char *_Str2);
  extern int  _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  extern int  _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  extern int  _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  extern int  _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  extern int  _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t  strcspn(const char *_Str,const char *_Control);
  extern char * _strerror(const char *_ErrMsg);
  char * strerror(int);
  extern char * _strlwr(char *_String);
  char *strlwr_l(char *_String,_locale_t _Locale);
  char * strncat(char *_Dest,const char *_Source,size_t _Count);
  int  strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  extern int  _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  extern int  _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char *_Dest,const char *_Source,size_t _Count);
  extern char * _strnset(char *_Str,int _Val,size_t _MaxCount);
   char * strpbrk(const char *_Str,const char *_Control);
   char * strrchr(const char *_Str,int _Ch);
  extern char * _strrev(char *_Str);
  size_t  strspn(const char *_Str,const char *_Control);
   char * strstr(const char *_Str,const char *_SubStr);
  char * strtok(char *_Str,const char *_Delim);
  extern char * _strupr(char *_String);
  extern char *_strupr_l(char *_String,_locale_t _Locale);
  size_t  strxfrm(char *_Dst,const char *_Src,size_t _MaxCount);
  extern size_t  _strxfrm_l(char *_Dst,const char *_Src,size_t _MaxCount,_locale_t _Locale);


  char * strdup(const char *_Src);
  int  strcmpi(const char *_Str1,const char *_Str2);
  int  stricmp(const char *_Str1,const char *_Str2);
  char * strlwr(char *_Str);
  int  strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount);
  extern __inline__ int  strncasecmp (const char *__sz1, const char *__sz2, size_t __sizeMaxCompare) { return _strnicmp (__sz1, __sz2, __sizeMaxCompare); }
  extern __inline__ int  strcasecmp (const char *__sz1, const char *__sz2) { return _stricmp (__sz1, __sz2); }
  char * strnset(char *_Str,int _Val,size_t _MaxCount);
  char * strrev(char *_Str);
  char * strset(char *_Str,int _Val);
  char * strupr(char *_Str);





  extern wchar_t * _wcsdup(const wchar_t *_Str);
  wchar_t * wcscat(wchar_t *_Dest,const wchar_t *_Source);
   wchar_t * wcschr(const wchar_t *_Str,wchar_t _Ch);
  int  wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t * wcscpy(wchar_t *_Dest,const wchar_t *_Source);
  size_t  wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t  wcslen(const wchar_t *_Str);
  size_t  wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t *_Dest,const wchar_t *_Source,size_t _Count);
  int  wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t *_Dest,const wchar_t *_Source,size_t _Count);
   wchar_t * wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
   wchar_t * wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t  wcsspn(const wchar_t *_Str,const wchar_t *_Control);
   wchar_t * wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t * wcstok(wchar_t *_Str,const wchar_t *_Delim);
  extern wchar_t * _wcserror(int _ErrNum);
  extern wchar_t * __wcserror(const wchar_t *_Str);
  extern int  _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  extern int  _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  extern int  _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  extern int  _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  extern wchar_t * _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount);
  extern wchar_t * _wcsrev(wchar_t *_Str);
  extern wchar_t * _wcsset(wchar_t *_Str,wchar_t _Val);
  extern wchar_t * _wcslwr(wchar_t *_String);
  extern wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale);
  extern wchar_t * _wcsupr(wchar_t *_String);
  extern wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale);
  size_t  wcsxfrm(wchar_t *_Dst,const wchar_t *_Src,size_t _MaxCount);
  extern size_t  _wcsxfrm_l(wchar_t *_Dst,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  int  wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  extern int  _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  extern int  _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  extern int  _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  extern int  _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  extern int  _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  extern int  _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  extern int  _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t * wcsdup(const wchar_t *_Str);

  int  wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  int  wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t * wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount);
  wchar_t * wcsrev(wchar_t *_Str);
  wchar_t * wcsset(wchar_t *_Str,wchar_t _Val);
  wchar_t * wcslwr(wchar_t *_Str);
  wchar_t * wcsupr(wchar_t *_Str);
  int  wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);







# 1 "d:/distr/tcc/include/sec_api/string_s.h" 1
# 9 "d:/distr/tcc/include/sec_api/string_s.h"
# 1 "d:/distr/tcc/include/string.h" 1
# 10 "d:/distr/tcc/include/sec_api/string_s.h" 2







  extern errno_t  _strset_s(char *_Dst,size_t _DstSize,int _Value);
  extern errno_t  _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
  extern errno_t  _strlwr_s(char *_Str,size_t _Size);
  extern errno_t  _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  extern errno_t  _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
  extern errno_t  _strupr_s(char *_Str,size_t _Size);
  extern errno_t  _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);


  extern wchar_t * wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
  extern errno_t  _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
  extern errno_t  __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
  extern errno_t  _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
  extern errno_t  _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
  extern errno_t  _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
  extern errno_t  _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
  extern errno_t  _wcsupr_s(wchar_t *_Str,size_t _Size);
  extern errno_t  _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);
# 164 "d:/distr/tcc/include/string.h" 2
# 4 "Array.c" 2

# 1 "d:/distr/tcc/include/assert.h" 1
# 43 "d:/distr/tcc/include/assert.h"
extern void  _wassert(const wchar_t *_Message,const wchar_t *_File,unsigned _Line);
extern void  _assert(const char *, const char *, unsigned);
# 6 "Array.c" 2
# 21 "utils.c" 2

_Bool ends_with(const char *str, const char *suffix)
{
	if (!str || !suffix) {
		return 0;
	}
	size_t lenstr = strlen(str);
	size_t lensuffix = strlen(suffix);
	if (lensuffix > lenstr) {
		return 0;
	}
	return strncmp(str + lenstr - lensuffix, suffix, lensuffix) == 0;
}
# 6 "main.c" 2



typedef struct {	s64 *data;	int count, allocated;} Array_s64;void array_s64_reserve(Array_s64 *array, const int reserve) {	if (reserve <= array->allocated) {	return;	}	int size = sizeof(s64);	int num_bytes = reserve * size;	s64 *new_memory = realloc(array->data, num_bytes);	((new_memory != ((void*)0)) ? (void)0 : _assert("new_memory != NULL", "main.c", 9));	array->data = new_memory;	array->allocated = reserve;}Array_s64 array_s64_create_uninitialized(const int size) {	Array_s64 array;	memset(&array, 0, sizeof(Array_s64));	array_s64_reserve(&array, size); array.count = size;	return array;}Array_s64 array_s64_create(const int size) {	Array_s64 array = array_s64_create_uninitialized(size);	memset(array.data, 0, sizeof(s64) * array.allocated);	return array;}Array_s64 array_s64_create_from_memory(const s64 *source, const int size) {	Array_s64 array;	array.data = (s64*)source;	array.count = array.allocated = size;	return array;}void array_s64_free(Array_s64 *array) {	free(array->data);	memset(&array, 0, sizeof(Array_s64));}void array_s64_add(Array_s64 *array, const s64 item) {	if (array->count >= array->allocated) {	int reserve = 1.61803398875 * array->allocated;	if (reserve < 8) {	reserve = 8;	}	array_s64_reserve(array, reserve);	}	array->data[array->count] = item;	array->count += 1;}int array_s64_find(const Array_s64 *array, const s64 item) {	int size = sizeof(s64);	for (int i = 0; i < array->count; ++i) {	if (memcmp(array->data + i, &item, size) == 0) {	return i;	}	}	return -1;}int array_s64_add_if_unique(Array_s64 *array, const s64 item) {	int index = array_s64_find(array, item);	if (index == -1) {	return -1;	}	array_s64_add(array, item);	return array->count-1;}void array_s64_print(const Array_s64 *array, void(*print_func)(s64*)) {	printf("Array(%d", array->count);	if (array->count != array->allocated) {	printf("/%d", array->allocated);	}	printf("){");	for (int i = 0; i < array->count; ++i) {	if (print_func != ((void*)0)) {	print_func(&array->data[i]);	} else {	char* str; if (strcmp("s64" , "int") == 0) {	str = "%d";	} else if (strcmp("s64" , "float") == 0) {	str = "%f";	} else {	printf("\nError: calling array_print(%s) with unsupported type. Specify custom printing function or add more types at Array.c\n", "s64");	abort();	}	printf(str, array->data[i]);	}	if (i != array->count-1) {	printf(", ");	}	}	printf("}\n");}void array_s64_unordered_remove_by_index(Array_s64 *array, const int index) {	((index >= 0) ? (void)0 : _assert("index >= 0", "main.c", 9));	((index < array->count) ? (void)0 : _assert("index < array->count", "main.c", 9));	if (index != array->count-1) {	int size = sizeof(s64);	s64 *current = array->data + index;	s64 *source = array->data + (array->count - 1);	memcpy(current, source, size);	}	array->count -= 1;}int array_s64_unordered_remove(Array_s64 *array, const s64 item) {	int removed = 0;	int size = sizeof(s64);	for (int i = 0; i < array->count; ++i) {	s64 *current = array->data + i;	if (memcmp(current, &item, size) == 0) {	array_s64_unordered_remove_by_index(array, i);	removed += 1;	i -= 1;	}	}	return removed;}void array_s64_ordered_remove_by_index(Array_s64 *array, const int index) {	((index >= 0) ? (void)0 : _assert("index >= 0", "main.c", 9));	((index < array->count) ? (void)0 : _assert("index < array->count", "main.c", 9));	if (index != array->count-1) {	int size = sizeof(s64) * (array->count - index);	s64 *current = array->data + index;	s64 *source = current + 1;	memmove(current, source, size);	}	array->count -= 1;}int array_s64_ordered_remove(Array_s64 *array, const s64 item) {	int removed = 0;	int size = sizeof(s64);	for (int i = 0; i < array->count; ++i) {	s64 *current = array->data + i;	if (memcmp(current, &item, size) == 0) {	array_s64_ordered_remove_by_index(array, i);	removed += 1;	i -= 1;	}	}	return removed;};
typedef struct {	float *data;	int count, allocated;} Array_float;void array_float_reserve(Array_float *array, const int reserve) {	if (reserve <= array->allocated) {	return;	}	int size = sizeof(float);	int num_bytes = reserve * size;	float *new_memory = realloc(array->data, num_bytes);	((new_memory != ((void*)0)) ? (void)0 : _assert("new_memory != NULL", "main.c", 10));	array->data = new_memory;	array->allocated = reserve;}Array_float array_float_create_uninitialized(const int size) {	Array_float array;	memset(&array, 0, sizeof(Array_float));	array_float_reserve(&array, size); array.count = size;	return array;}Array_float array_float_create(const int size) {	Array_float array = array_float_create_uninitialized(size);	memset(array.data, 0, sizeof(float) * array.allocated);	return array;}Array_float array_float_create_from_memory(const float *source, const int size) {	Array_float array;	array.data = (float*)source;	array.count = array.allocated = size;	return array;}void array_float_free(Array_float *array) {	free(array->data);	memset(&array, 0, sizeof(Array_float));}void array_float_add(Array_float *array, const float item) {	if (array->count >= array->allocated) {	int reserve = 1.61803398875 * array->allocated;	if (reserve < 8) {	reserve = 8;	}	array_float_reserve(array, reserve);	}	array->data[array->count] = item;	array->count += 1;}int array_float_find(const Array_float *array, const float item) {	int size = sizeof(float);	for (int i = 0; i < array->count; ++i) {	if (memcmp(array->data + i, &item, size) == 0) {	return i;	}	}	return -1;}int array_float_add_if_unique(Array_float *array, const float item) {	int index = array_float_find(array, item);	if (index == -1) {	return -1;	}	array_float_add(array, item);	return array->count-1;}void array_float_print(const Array_float *array, void(*print_func)(float*)) {	printf("Array(%d", array->count);	if (array->count != array->allocated) {	printf("/%d", array->allocated);	}	printf("){");	for (int i = 0; i < array->count; ++i) {	if (print_func != ((void*)0)) {	print_func(&array->data[i]);	} else {	char* str; if (strcmp("float" , "int") == 0) {	str = "%d";	} else if (strcmp("float" , "float") == 0) {	str = "%f";	} else {	printf("\nError: calling array_print(%s) with unsupported type. Specify custom printing function or add more types at Array.c\n", "float");	abort();	}	printf(str, array->data[i]);	}	if (i != array->count-1) {	printf(", ");	}	}	printf("}\n");}void array_float_unordered_remove_by_index(Array_float *array, const int index) {	((index >= 0) ? (void)0 : _assert("index >= 0", "main.c", 10));	((index < array->count) ? (void)0 : _assert("index < array->count", "main.c", 10));	if (index != array->count-1) {	int size = sizeof(float);	float *current = array->data + index;	float *source = array->data + (array->count - 1);	memcpy(current, source, size);	}	array->count -= 1;}int array_float_unordered_remove(Array_float *array, const float item) {	int removed = 0;	int size = sizeof(float);	for (int i = 0; i < array->count; ++i) {	float *current = array->data + i;	if (memcmp(current, &item, size) == 0) {	array_float_unordered_remove_by_index(array, i);	removed += 1;	i -= 1;	}	}	return removed;}void array_float_ordered_remove_by_index(Array_float *array, const int index) {	((index >= 0) ? (void)0 : _assert("index >= 0", "main.c", 10));	((index < array->count) ? (void)0 : _assert("index < array->count", "main.c", 10));	if (index != array->count-1) {	int size = sizeof(float) * (array->count - index);	float *current = array->data + index;	float *source = current + 1;	memmove(current, source, size);	}	array->count -= 1;}int array_float_ordered_remove(Array_float *array, const float item) {	int removed = 0;	int size = sizeof(float);	for (int i = 0; i < array->count; ++i) {	float *current = array->data + i;	if (memcmp(current, &item, size) == 0) {	array_float_ordered_remove_by_index(array, i);	removed += 1;	i -= 1;	}	}	return removed;};

void my_printing_function(s64 *n) {
	printf("MYINT(%lld)", *n);
}

int main() {
	Array_s64 a1 = array_s64_create(0);
	Array_float a2 = array_float_create(0);

	for (int i = 0; i < 15; ++i) {
		array_s64_add(&a1, (rand()%10));
		array_float_add(&a2, (rand()%10));
	}

	array_s64_print(&a1, ((void*)0));
	array_float_print(&a2, ((void*)0));
# 38 "main.c"
}
